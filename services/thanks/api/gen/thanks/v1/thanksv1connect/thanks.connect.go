// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: thanks/v1/thanks.proto

package thanksv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/horirinn2000/grpc-connect-envoy/services/thanks/api/gen/thanks/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ThanksServiceName is the fully-qualified name of the ThanksService service.
	ThanksServiceName = "thanks.v1.ThanksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ThanksServiceThanksProcedure is the fully-qualified name of the ThanksService's Thanks RPC.
	ThanksServiceThanksProcedure = "/thanks.v1.ThanksService/Thanks"
)

// ThanksServiceClient is a client for the thanks.v1.ThanksService service.
type ThanksServiceClient interface {
	Thanks(context.Context, *v1.ThanksRequest) (*v1.ThanksResponse, error)
}

// NewThanksServiceClient constructs a client for the thanks.v1.ThanksService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThanksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ThanksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	thanksServiceMethods := v1.File_thanks_v1_thanks_proto.Services().ByName("ThanksService").Methods()
	return &thanksServiceClient{
		thanks: connect.NewClient[v1.ThanksRequest, v1.ThanksResponse](
			httpClient,
			baseURL+ThanksServiceThanksProcedure,
			connect.WithSchema(thanksServiceMethods.ByName("Thanks")),
			connect.WithClientOptions(opts...),
		),
	}
}

// thanksServiceClient implements ThanksServiceClient.
type thanksServiceClient struct {
	thanks *connect.Client[v1.ThanksRequest, v1.ThanksResponse]
}

// Thanks calls thanks.v1.ThanksService.Thanks.
func (c *thanksServiceClient) Thanks(ctx context.Context, req *v1.ThanksRequest) (*v1.ThanksResponse, error) {
	response, err := c.thanks.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ThanksServiceHandler is an implementation of the thanks.v1.ThanksService service.
type ThanksServiceHandler interface {
	Thanks(context.Context, *v1.ThanksRequest) (*v1.ThanksResponse, error)
}

// NewThanksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThanksServiceHandler(svc ThanksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	thanksServiceMethods := v1.File_thanks_v1_thanks_proto.Services().ByName("ThanksService").Methods()
	thanksServiceThanksHandler := connect.NewUnaryHandlerSimple(
		ThanksServiceThanksProcedure,
		svc.Thanks,
		connect.WithSchema(thanksServiceMethods.ByName("Thanks")),
		connect.WithHandlerOptions(opts...),
	)
	return "/thanks.v1.ThanksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ThanksServiceThanksProcedure:
			thanksServiceThanksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedThanksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedThanksServiceHandler struct{}

func (UnimplementedThanksServiceHandler) Thanks(context.Context, *v1.ThanksRequest) (*v1.ThanksResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("thanks.v1.ThanksService.Thanks is not implemented"))
}
